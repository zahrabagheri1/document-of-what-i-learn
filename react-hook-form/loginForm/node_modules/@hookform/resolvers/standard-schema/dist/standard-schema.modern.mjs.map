{"version":3,"file":"standard-schema.modern.mjs","sources":["../src/standard-schema.ts"],"sourcesContent":["import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport { StandardSchemaV1 } from '@standard-schema/spec';\nimport { FieldError } from 'react-hook-form';\nimport type { Resolver } from './types';\n\nconst parseIssues = (issues: readonly StandardSchemaV1.Issue[]) => {\n  const errors: Record<string, FieldError> = {};\n\n  for (let i = 0; i < issues.length; i++) {\n    const issue = issues[i];\n    const path = issue.path?.join('.') ?? '';\n\n    if (path) {\n      if (!errors[path]) {\n        errors[path] = { message: issue.message } as FieldError;\n      }\n    }\n  }\n\n  return errors;\n};\n\nexport const standardSchemaResolver: Resolver =\n  (schema) => async (values, _, options) => {\n    let result = schema['~standard'].validate(values);\n    if (result instanceof Promise) {\n      result = await result;\n    }\n\n    if (result.issues) {\n      const errors = parseIssues(result.issues);\n\n      return {\n        values: {},\n        errors: toNestErrors(errors, options),\n      };\n    }\n\n    options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n    return {\n      values: values,\n      errors: {},\n    };\n  };\n"],"names":["standardSchemaResolver","schema","async","values","_","options","result","validate","Promise","issues","errors","i","length","_issue$path$join","_issue$path","issue","path","join","message","parseIssues","toNestErrors","shouldUseNativeValidation","validateFieldsNatively"],"mappings":"+EAKA,MAiBaA,EACVC,GAAWC,MAAOC,EAAQC,EAAGC,KAC5B,IAAIC,EAASL,EAAO,aAAaM,SAASJ,GAK1C,GAJIG,aAAkBE,UACpBF,QAAeA,GAGbA,EAAOG,OAAQ,CACjB,MAAMC,EAzBSD,KACnB,MAAMC,EAAqC,CAAE,EAE7C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IAAK,CAAA,IAAAE,EAAAC,EACtC,MAAMC,EAAQN,EAAOE,GACfK,EAA4B,OAAxBH,EAAGC,OAAHA,EAAGC,EAAMC,WAANF,EAAAA,EAAYG,KAAK,MAAIJ,EAAI,GAElCG,IACGN,EAAOM,KACVN,EAAOM,GAAQ,CAAEE,QAASH,EAAMG,UAGtC,CAEA,OAAOR,GAWYS,CAAYb,EAAOG,QAElC,MAAO,CACLN,OAAQ,GACRO,OAAQU,EAAaV,EAAQL,GAEjC,CAIA,OAFAA,EAAQgB,2BAA6BC,EAAuB,GAAIjB,GAEzD,CACLF,OAAQA,EACRO,OAAQ,CAAA"}