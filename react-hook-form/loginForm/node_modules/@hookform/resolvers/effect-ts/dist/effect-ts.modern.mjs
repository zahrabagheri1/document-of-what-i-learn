import{toNestErrors as e,validateFieldsNatively as r}from"@hookform/resolvers";import{Effect as o}from"effect";import{decodeUnknown as s,ArrayFormatter as t}from"effect/ParseResult";import{appendErrors as a}from"react-hook-form";const i=(i,c={errors:"all",onExcessProperty:"ignore"})=>(m,n,l)=>s(i,c)(m).pipe(o.catchAll(e=>o.flip(t.formatIssue(e))),o.mapError(r=>{const o=!l.shouldUseNativeValidation&&"all"===l.criteriaMode,s=r.reduce((e,r)=>{const s=r.path.join(".");if(e[s]||(e[s]={message:r.message,type:r._tag}),o){const t=e[s].types,i=t&&t[String(r._tag)];e[s]=a(s,o,e,r._tag,i?[].concat(i,r.message):r.message)}return e},{});return e(s,l)}),o.tap(()=>o.sync(()=>l.shouldUseNativeValidation&&r({},l))),o.match({onFailure:e=>({errors:e,values:{}}),onSuccess:e=>({errors:{},values:e})}),o.runPromise);export{i as effectTsResolver};
//# sourceMappingURL=effect-ts.modern.mjs.map
